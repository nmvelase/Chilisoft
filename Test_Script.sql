--Please execute the script in the respective order
declare
lv_count number;
begin
  select count(1)
    into lv_count
    from dba_tables
   where table_name = 'TABLE_MEETING';
  
  if lv_count > 0 then
    execute immediate 'DROP TABLE TABLE_MEETING';
  end if;
  
end;
/
CREATE TABLE TABLE_MEETING(MEETING_ID             NUMBER GENERATED BY DEFAULT AS IDENTITY,--come with default oracle index and unique number
                           MINUTES_ID             NUMBER NOT NULL,
                           LOCATION               VARCHAR2(50) NOT NULL,
                           TIME                   DATE DEFAULT SYSDATE,
                           ATTENDENT_PERCENTAGE   NUMBER,
                           APOLOGIES              VARCHAR2(4000),
                           MEETING_TYPE           VARCHAR2(10) NOT NULL,
                           STATUS                 VARCHAR2(10) NOT NULL,                         
                           PRIMARY KEY(MEETING_ID))
/
declare
lv_count number;
begin
  select count(1)
    into lv_count
    from dba_tables
   where table_name = 'TABLE_MINUTES';
  
  if lv_count > 0 then
    execute immediate 'DROP TABLE TABLE_MINUTES';
  end if;
  
end;
/
CREATE TABLE TABLE_MINUTES(MINUTES_ID             NUMBER GENERATED BY DEFAULT AS IDENTITY,--come with default oracle index and unique number
                           MEETING_ID             NUMBER NOT NULL,
                           STATUS                 VARCHAR2(10) NOT NULL,
                           MINUTES_DESRIPTION     VARCHAR2(4000) NOT NULL,
                           VERSION                NUMBER DEFAULT 1,
                           CREATED_BY             VARCHAR2(20) NOT NULL,
                           UPDATED_BY             VARCHAR2(20) NOT NULL,
                           TIMESTAMP              DATE NOT NULL,
                           RECORD_TIMESTAMP       DATE NOT NULL,
                           TASK_ID                NUMBER NOT NULL,
                           PREV_MEETING_ID        NUMBER,                                                    
                           PRIMARY KEY(MINUTES_ID))
/
declare
lv_count number;
begin
  select count(1)
    into lv_count
    from dba_tables
   where table_name = 'TABLE_TASK';
  
  if lv_count > 0 then
    execute immediate 'DROP TABLE TABLE_TASK';
  end if;
  
end;
/
CREATE TABLE TABLE_TASK(TASK_ID             NUMBER GENERATED BY DEFAULT AS IDENTITY,--come with default oracle index and unique number
                        ACTION_DESCRIPTION  VARCHAR2(4000) NOT NULL,
                        STATUS              VARCHAR2(10) NOT NULL,
                        USER_ID             VARCHAR2(20) NOT NULL,
                        ITEM_DESCRIPTION    VARCHAR2(4000) NOT NULL,
                        DUE_DATE            DATE NOT NULL,
                        UPDATED_BY          VARCHAR2(20) NOT NULL,
                        MINUTES_ID          NUMBER NOT NULL,
                        PRIMARY KEY(TASK_ID))
/
declare
lv_count number;
begin
  select count(1)
    into lv_count
    from dba_tables
   where table_name = 'TABLE_ATTENDEE';
  
  if lv_count > 0 then
    execute immediate 'DROP TABLE TABLE_ATTENDEE';
  end if;
  
end;
/
CREATE TABLE TABLE_ATTENDEE(USER_ID             NUMBER, 
                            EMAIL_ADDRESS       VARCHAR2(100) NOT NULL,
                            NAME                VARCHAR2(100) NOT NULL,
                            LAST_NAME           VARCHAR2(100) NOT NULL,
                            PRIMARY KEY(USER_ID))
/
declare
lv_count number;
begin
  select count(1)
    into lv_count
    from dba_tables
   where table_name = 'TABLE_TRANSLATION';
  
  if lv_count > 0 then
    execute immediate 'DROP TABLE TABLE_TRANSLATION';
  end if;
  
end;
/
CREATE TABLE TABLE_TRANSLATION(TASK_STAUS             VARCHAR2(10), 
                               MEETING_TYPE           VARCHAR2(10),
                               MEETING_STATUS         VARCHAR2(10),
                               MINUTES_STATUS         VARCHAR2(10),
                               DESCRIPTION            VARCHAR2(100))
/
truncate table TABLE_MEETING; 
truncate table TABLE_MINUTES;
truncate table TABLE_TASK; 
truncate table TABLE_ATTENDEE;
truncate table TABLE_TRANSLATION; 
/
insert into TABLE_MEETING (MINUTES_ID,LOCATION,TIME,ATTENDENT_PERCENTAGE,APOLOGIES,MEETING_TYPE,STATUS)
  values(1,'Ablerton',sysdate,25,'None noted','MANCO'/*this can be validate on the triger for transaltion table*/,
         'Open'/*this can be validate on the triger for transaltion table*/);
         
insert into TABLE_MINUTES (MEETING_ID,STATUS,MINUTES_DESRIPTION,VERSION,CREATED_BY,UPDATED_BY,TIMESTAMP,RECORD_TIMESTAMP,TASK_ID,PREV_MEETING_ID)
  values(1,'Open','MANCO will have a iboz next month',1,'NQ','NQ'/*user can be read from session*/,sysdate,sysdate,1,1);    
  
insert into TABLE_TASK (ACTION_DESCRIPTION,STATUS,USER_ID,ITEM_DESCRIPTION,DUE_DATE,UPDATED_BY,MINUTES_ID)
  values('Budget implementation','Open','NQ','More description if need be',sysdate,'NQ',1);       
  
insert into TABLE_ATTENDEE (USER_ID,EMAIL_ADDRESS,NAME,LAST_NAME)
  values(1,'NQ@GMAIL','NQ','Mvelase'); 
 
insert into TABLE_TRANSLATION (TASK_STAUS,DESCRIPTION)
  values('Open','Open task'); 
  
insert into TABLE_TRANSLATION (TASK_STAUS,DESCRIPTION)
  values('Inprogress','Inprogress task');   

insert into TABLE_TRANSLATION (TASK_STAUS,DESCRIPTION)
  values('Closed','Closed task'); 

insert into TABLE_TRANSLATION (MEETING_TYPE,DESCRIPTION)
  values('MANCO','Management meeting'); 

insert into TABLE_TRANSLATION (MEETING_TYPE,DESCRIPTION)
  values('Finance','Finance meeting');   
  
insert into TABLE_TRANSLATION (MEETING_TYPE,DESCRIPTION)
  values('PTL','Project Team Leaders');    

insert into TABLE_TRANSLATION (MEETING_STATUS,DESCRIPTION)
  values('Open','Open meeting status'); 
  
insert into TABLE_TRANSLATION (MEETING_STATUS,DESCRIPTION)
  values('Inprogress','Inprogress meeting status');   

insert into TABLE_TRANSLATION (MEETING_STATUS,DESCRIPTION)
  values('Closed','Closed meeting status');      

insert into TABLE_TRANSLATION (MINUTES_STATUS,DESCRIPTION)
  values('Open','Open minutes status'); 
  
insert into TABLE_TRANSLATION (MINUTES_STATUS,DESCRIPTION)
  values('Inprogress','Inprogress minutes status');   

insert into TABLE_TRANSLATION (MINUTES_STATUS,DESCRIPTION)
  values('Closed','Closed minutes status'); 
    
commit;         

/*
select * from TABLE_MEETING; 
select * from TABLE_MINUTES;
select * from TABLE_TASK; 
select * from TABLE_ATTENDEE;
select * from TABLE_TRANSLATION; 
*/

select tme.meeting_type,tt.description "meeting type description", tme.status "meeting status",tmi.status "minute status",tmi.minutes_desription "minutes comments",
       tta.action_description,tta.status "task status",tta.user_id "allocated user",tta.item_description,tta.due_date,
       ta.name "attendee name",ta.last_name "attendee surname",ta.email_address "attendee email address"
  from TABLE_MEETING tme,TABLE_MINUTES tmi,TABLE_TRANSLATION tt,TABLE_TASK tta,TABLE_ATTENDEE ta
 where tme.meeting_id = tmi.minutes_id
   and tt.meeting_type = tme.meeting_type
   and tta.minutes_id = tmi.minutes_id
   and ta.name = tta.user_id;
